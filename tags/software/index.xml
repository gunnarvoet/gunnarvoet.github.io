<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software | Gunnar Voet</title><link>https://gunnarvoet.github.io/tags/software/</link><atom:link href="https://gunnarvoet.github.io/tags/software/index.xml" rel="self" type="application/rss+xml"/><description>software</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022 Gunnar Voet</copyright><lastBuildDate>Fri, 19 Jun 2020 00:00:00 +0000</lastBuildDate><image><url>https://gunnarvoet.github.io/images/icon_hud692a76e5d31a98a8df50b31c984ca7f_48833_512x512_fill_lanczos_center_3.png</url><title>software</title><link>https://gunnarvoet.github.io/tags/software/</link></image><item><title>watchmagic</title><link>https://gunnarvoet.github.io/post/watchmagic/</link><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate><guid>https://gunnarvoet.github.io/post/watchmagic/</guid><description>&lt;p>
&lt;a href="https://jupyter.org/" target="_blank" rel="noopener">Jupyter notebooks&lt;/a> are a great tool for explorative data analysis. However, they tend to get a little messy as a project grows in size and I have gotten into the habit of moving most of my code into external packages which I then import into a notebook. This way, I can still keep figures and notes in the notebook while keeping the analysis code modular and being able to edit it in an external editor. Using IPython&amp;rsquo;s &lt;code>%autoreload&lt;/code> magic, the external code can automatically be udpated inside the notebook every time a cell is re-evaluated. Awesome! The only slightly annoying part of this workflow is having to jump back and forth between editor and notebook every time the code has been changed, just to re-evaluate a cell.&lt;/p>
&lt;p>Meet
&lt;a href="https://github.com/gunnarvoet/watchmagic" target="_blank" rel="noopener">watchmagic&lt;/a>. It adds the &lt;code>%%watch&lt;/code> magic command to IPython. If added to the top of a cell, &lt;code>%%watch&lt;/code> will observe a given directory and re-evaluate the cell on file changes. This way, I only have to save my progress in the editor and can watch the notebook update by itself whenever I change a file. Under the hood,
&lt;a href="https://github.com/gunnarvoet/watchmagic" target="_blank" rel="noopener">watchmagic&lt;/a> leverages the
&lt;a href="https://pythonhosted.org/watchdog/" target="_blank" rel="noopener">watchdog&lt;/a> package.&lt;/p>
&lt;p>Installation of
&lt;a href="https://github.com/gunnarvoet/watchmagic" target="_blank" rel="noopener">watchmagic&lt;/a> is as simple as&lt;/p>
&lt;pre>&lt;code class="language-shell">pip install watchmagic
&lt;/code>&lt;/pre>
&lt;p>A very basic example of displaying a plot in the notebook with analysis code development in the external file &lt;code>science_plots.py&lt;/code> may look like this:&lt;/p>
&lt;pre>&lt;code class="language-python"># import external package with analysis code
import science_plots
# load autoreload magic
%load_ext autoreload
# set autoreload to act on all imports
%autoreload 2
# load watch magic
%load_ext watchmagic
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">%%watch --patterns *.py
# call external code
science_plots.overview_plot()
&lt;/code>&lt;/pre>
&lt;p>After editing &lt;code>science_plots.py&lt;/code> and saving it, the plot will be updated:&lt;/p>
&lt;pre>&lt;code class="language-shell">watch: ./science_plots.py has been modified
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="./Untitled_1_1.png" alt="png">&lt;/p>
&lt;p>By default, &lt;code>%%watch&lt;/code> will look for changes in the current directory. A different directory can be supplied via the &lt;code>--path&lt;/code> command line option. In the example above the &lt;code>--patterns&lt;/code> command line option is used to only look for changes in &lt;code>*.py&lt;/code> files. The following command line options are available:&lt;/p>
&lt;pre>&lt;code class="language-shell">-p PATH, --path PATH provides the PATH to watch for file changes. If
not provided, the current directory will be
watched.
-r, --recursive include subdirectories recursively when
watching for file changes. This is the default
behaviour.
-nr, --non-recursive do not include subdirectories when watching for
file changes.
--patterns &amp;lt;[PATTERNS [PATTERNS ...]]&amp;gt;
look for files with these PATTERNS.
--ignore &amp;lt;[IGNORE_PATTERNS [IGNORE_PATTERNS ...]]&amp;gt;
ignore files containing IGNORE_PATTERNS when
watching for file changes.
&lt;/code>&lt;/pre>
&lt;p>Defaults for a few parameters can be set in the
&lt;a href="https://ipython.readthedocs.io/en/stable/config/intro.html#setting-configurable-options" target="_blank" rel="noopener">.ipython_config.py&lt;/a> file by adding any of the following lines:&lt;/p>
&lt;pre>&lt;code class="language-python">#---------------------------------------------------------------
# WatchMagics configuration
#---------------------------------------------------------------
c.WatchMagics.default_patterns = ['*.py']
c.WatchMagics.default_ignore_patterns = ['*.ipynb']
c.WatchMagics.default_case_sensitive = False
c.WatchMagics.default_ignore_directories = True
&lt;/code>&lt;/pre>
&lt;!--
&lt;video controls >
&lt;source src="watchmagic_example.mp4" type="video/mp4">
&lt;/video> --></description></item></channel></rss>