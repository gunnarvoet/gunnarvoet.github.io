<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software | Gunnar Voet</title>
    <link>https://gunnarvoet.github.io/tags/software/</link>
      <atom:link href="https://gunnarvoet.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <description>software</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Gunnar Voet</copyright><lastBuildDate>Fri, 19 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://gunnarvoet.github.io/images/icon_hud692a76e5d31a98a8df50b31c984ca7f_48833_512x512_fill_lanczos_center_2.png</url>
      <title>software</title>
      <link>https://gunnarvoet.github.io/tags/software/</link>
    </image>
    
    <item>
      <title>watchmagic</title>
      <link>https://gunnarvoet.github.io/post/watchmagic/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://gunnarvoet.github.io/post/watchmagic/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jupyter notebooks&lt;/a&gt; are a great tool for explorative data analysis. However, they tend to get a little messy as a project grows in size and I have gotten into the habit of moving most of my code into external packages which I then import into a notebook. This way, I can still keep figures and notes in the notebook while keeping the analysis code modular and being able to edit it in an external editor. Using IPython&amp;rsquo;s &lt;code&gt;%autoreload&lt;/code&gt; magic, the external code can automatically be udpated inside the notebook every time a cell is re-evaluated. Awesome! The only slightly annoying part of this workflow is having to jump back and forth between editor and notebook every time the code has been changed, just to re-evaluate a cell.&lt;/p&gt;
&lt;p&gt;Meet 
&lt;a href=&#34;https://github.com/gunnarvoet/watchmagic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watchmagic&lt;/a&gt;. It adds the &lt;code&gt;%%watch&lt;/code&gt; magic command to IPython. If added to the top of a cell, &lt;code&gt;%%watch&lt;/code&gt; will observe a given directory and re-evaluate the cell on file changes. This way, I only have to save my progress in the editor and can watch the notebook update by itself whenever I change a file. Under the hood, 
&lt;a href=&#34;https://github.com/gunnarvoet/watchmagic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watchmagic&lt;/a&gt; leverages the 
&lt;a href=&#34;https://pythonhosted.org/watchdog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watchdog&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Installation of 
&lt;a href=&#34;https://github.com/gunnarvoet/watchmagic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watchmagic&lt;/a&gt; is as simple as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install watchmagic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A very basic example of displaying a plot in the notebook with analysis code development in the external file &lt;code&gt;science_plots.py&lt;/code&gt; may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import external package with analysis code
import science_plots
# load autoreload magic
%load_ext autoreload
# set autoreload to act on all imports
%autoreload 2
# load watch magic
%load_ext watchmagic
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%watch --patterns *.py
# call external code
science_plots.overview_plot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After editing &lt;code&gt;science_plots.py&lt;/code&gt; and saving it, the plot will be updated:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;watch: ./science_plots.py has been modified
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Untitled_1_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;%%watch&lt;/code&gt; will look for changes in the current directory. A different directory can be supplied via the &lt;code&gt;--path&lt;/code&gt; command line option. In the example above the &lt;code&gt;--patterns&lt;/code&gt; command line option is used to only look for changes in &lt;code&gt;*.py&lt;/code&gt; files. The following command line options are available:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-p PATH, --path PATH  provides the PATH to watch for file changes. If
                        not provided, the current directory will be
                        watched.
-r, --recursive       include subdirectories recursively when
                        watching for file changes. This is the default
                        behaviour.
-nr, --non-recursive  do not include subdirectories when watching for
                        file changes.
--patterns &amp;lt;[PATTERNS [PATTERNS ...]]&amp;gt;
                        look for files with these PATTERNS.
--ignore &amp;lt;[IGNORE_PATTERNS [IGNORE_PATTERNS ...]]&amp;gt;
                        ignore files containing IGNORE_PATTERNS when
                        watching for file changes.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Defaults for a few parameters can be set in the 
&lt;a href=&#34;https://ipython.readthedocs.io/en/stable/config/intro.html#setting-configurable-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.ipython_config.py&lt;/a&gt; file by adding any of the following lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#---------------------------------------------------------------
# WatchMagics configuration
#---------------------------------------------------------------
c.WatchMagics.default_patterns = [&#39;*.py&#39;]
c.WatchMagics.default_ignore_patterns = [&#39;*.ipynb&#39;]
c.WatchMagics.default_case_sensitive = False
c.WatchMagics.default_ignore_directories = True
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 











  


&lt;video controls &gt;
  &lt;source src=&#34;watchmagic_example.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt; --&gt;
</description>
    </item>
    
  </channel>
</rss>
